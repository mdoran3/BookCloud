CREATE DATABASE BookCloud;
USE BookCloud;

CREATE TABLE USER (
userName		VARCHAR (15)	NOT NULL,
password		VARCHAR (25)	NOT NULL,
firstName		VARCHAR (25)	NOT NULL,
lastName		VARCHAR (25) 	NOT NULL,
emailAddress		VARCHAR (25)	NOT NULL,
phoneNumber		CHAR (11)	NOT NULL,
registrationDate	DATE		NOT NULL,
streetNo		INT		NOT NULL,
streetName		VARCHAR (25)	NOT NULL,
city 			VARCHAR (25)	NOT NULL,
state			VARCHAR (2)	NOT NULL,
zipCode			VARCHAR (25)	NOT NULL,
PRIMARY KEY (userName)
);

CREATE TABLE ADMIN (
userName		VARCHAR (15)	NOT NULL,
adminID			VARCHAR (15) 	NOT NULL,
password		VARCHAR (25)	NOT NULL,
firstName		VARCHAR (25)	NOT NULL,
lastName		VARCHAR (25) 	NOT NULL,
emailAddress		VARCHAR (25)	NOT NULL,
phoneNumber		CHAR (11)	NOT NULL,
registrationDate	DATE		NOT NULL,
streetNo		INT		NOT NULL,
streetName		VARCHAR (25)	NOT NULL,
city 			VARCHAR (25)	NOT NULL,
State			VARCHAR (2)	NOT NULL,
zipCode			VARCHAR (25)	NOT NULL,
PRIMARY KEY (userName),
FOREIGN KEY (userName) REFERENCES USER(userName)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE BOOK (
ISBN			CHAR (13)	NOT NULL,
Title			VARCHAR (25)	NOT NULL,
Author			VARCHAR (25)	NOT NULL,
Genre			VARCHAR (25) 	NOT NULL,
publicationYear		VARCHAR (25)	NOT NULL,
Price			CHAR (11)	NOT NULL,
availableQuantity	VARCHAR (25)	NOT NULL,
PRIMARY KEY (ISBN)
);

CREATE TABLE PAYMENT (
paymentID		VARCHAR (15)	NOT NULL,
paymentDate		DATE		NOT NULL,
paymentMethod		VARCHAR (25)	NOT NULL,
transactionStatus	VARCHAR (25) 	NOT NULL,
PRIMARY KEY (paymentID)
);

CREATE TABLE `ORDER` (
orderID			VARCHAR (15)	NOT NULL,
Description		VARCHAR (25)	NOT NULL,
orderDate		DATE		NOT NULL,
PRIMARY KEY (orderID)
);

CREATE TABLE CART (
orderID			VARCHAR (15)	NOT NULL,
numberOfBooks		INT		NOT NULL,
PRIMARY KEY (orderID, numberOfBooks),
FOREIGN KEY (orderID) REFERENCES `ORDER`(orderID)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE CONTAINS (
ISBN			CHAR (13)	NOT NULL,
orderID			VARCHAR (15)	NOT NULL,
PRIMARY KEY (ISBN, orderID),
FOREIGN KEY (ISBN) REFERENCES BOOK(ISBN)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (orderID) REFERENCES `ORDER`(orderID)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE HAS (
userName		VARCHAR (25)	NOT NULL,
paymentID		VARCHAR (15)	NOT NULL,
PRIMARY KEY (userName, paymentID),
FOREIGN KEY (userName) REFERENCES USER(userName)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (paymentID) REFERENCES PAYMENT(paymentID)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX adminID_index ON ADMIN(adminID); 

CREATE TABLE CAN_BE (
userName		VARCHAR (25)	NOT NULL,
adminID			VARCHAR (15) 	NOT NULL,
PRIMARY KEY (userName, adminID),
FOREIGN KEY (userName) REFERENCES USER(userName)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (adminID) REFERENCES ADMIN(adminID)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE INDEX numberOfBooks_index ON CART(numberOfBooks);

CREATE TABLE ASSOC_WITH (
orderID			VARCHAR (15)	NOT NULL,
numberOfBooks		INT		NOT NULL,
PRIMARY KEY (orderID, numberOfBooks),
FOREIGN KEY (orderID) REFERENCES `ORDER`(orderID)
ON UPDATE CASCADE ON DELETE CASCADE, 
FOREIGN KEY (numberOfBooks) REFERENCES CART(numberOfBooks)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE UPDATE_QTY (
userName		VARCHAR (25)	NOT NULL,
ISBN			VARCHAR (15)	NOT NULL,
PRIMARY KEY (userName, ISBN),
FOREIGN KEY (username) REFERENCES ADMIN(adminID)
ON UPDATE CASCADE ON DELETE CASCADE, 
FOREIGN KEY (ISBN) REFERENCES BOOK(ISBN)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE `CREATE` (
userName		VARCHAR (25)	NOT NULL,
orderID			VARCHAR (15)	NOT NULL,
PRIMARY KEY (userName, orderID),
FOREIGN KEY (username) REFERENCES USER(userName)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (orderID) REFERENCES `ORDER`(orderID)
ON UPDATE CASCADE ON DELETE CASCADE
);

CREATE TABLE PAY_FOR (
paymentID		VARCHAR (15)	NOT NULL,
orderID			VARCHAR (15)	NOT NULL,
PRIMARY KEY (paymentID, orderID),
FOREIGN KEY (paymentID) REFERENCES PAYMENT(paymentID)
ON UPDATE CASCADE ON DELETE CASCADE,
FOREIGN KEY (orderID) REFERENCES `ORDER`(orderID) 
ON UPDATE CASCADE ON DELETE CASCADE
);





